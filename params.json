{"name":"Jenkins Workshop","body":"# Jenkins Workshop\r\nThis is the [Jenkins Continuous Integration](http://jenkins-ci.org) workshop run by Matthew McCullough.\r\n\r\nThis latest version of this page can be found on [GitHub](https://github.com/matthewmccullough/jenkins-workshop).\r\n\r\n## Resources\r\n* Download the free [O'Reilly Jenkins eBook](http://www.wakaleo.com/books/jenkins-the-definitive-guide) by John Ferguson Smart.\r\n* Review Matthew's [curated Jenkins bookmarks](http://delicious.com/matthew.mccullough/jenkins).\r\n* [Jenkins Official Welcome Site](https://wiki.jenkins-ci.org/display/JENKINS/Meet+Jenkins)\r\n* [Jenkins Tutorials](http://jenkins-ci.org/views/hudson-tutorials)\r\n* [Jenkins Homepage](http://jenkins-ci.org)\r\n* [Jenkins Usage Guide](https://wiki.jenkins-ci.org/display/JENKINS/Use+Jenkins)\r\n\r\n## Set up Supporting Tools\r\n* Git\r\n    * Test if you already have Git installed by typing `git --version`\r\n    * If needed, install Git from platform-specific binary installers\r\n    * After install, test that Git is working by running `git --version`\r\n* Maven\r\n    * Available as *Auto install* option in Jenkins Management page\r\n    * Or install manually\r\n    * Can have multiple versions in Jenkins administration\r\n* JDK\r\n    * Available as *Auto install* option in Jenkins Management page\r\n* Sonar\r\n    * Manually install\r\n    * Only used in today's workshop if already installed\r\n* Gradle\r\n    * Available as *Auto install* option in Jenkins Management page\r\n    * Can also be auto-downloaded via Gradle wrapper\r\n    * 1.0-rc-2\r\n* Ant\r\n    * Available as *Auto install* option in Jenkins Management page\r\n    * 1.8.3\r\n\r\n## Set up Jenkins\r\n* Download Jenkins WAR from local content server or ['http://jenkins-ci.org'](http://jenkins-ci.org)\r\n* Run `java -jar jenkins.war` which runs on port 8080\r\n* Alternatively, run on a different port `java -jar jenkins.war --httpPort=8090`\r\n* Test Jenkins is running by opening [`http://localhost:8080`](http://localhost:8080)\r\n\r\n## Echo Job\r\n* Create a new Freestyle job named `echojob`\r\n* Add an *Execute shell* build step or *Execute Windows batch command* as appropriate for your OS.\r\n* In the build step, echo some text with `echo MyBuildWorked`\r\n\r\n## Jenkins Plugins\r\n* 543 Plugins\r\n* https://github.com/jenkinsci\r\n\r\n## SCM Configuration\r\n* The SVN plugin is preinstalled\r\n* Manually install the Git plugin and restart Jenkins\r\n    * Click the \"Manage Jenkins\" link\r\n    * Click the \"Manage Plugins\" link\r\n* Review ~20 others that I typically use\r\n\r\n## SVN Checkout\r\n* We'll use the built-in SVN plugin\r\n* Create a new Freestyle job named `svncheckout`\r\n* Add source code URL `http://svn.apache.org/repos/asf/commons/proper/logging/trunk`\r\n* Add an *Execute shell* build step or *Execute Windows batch command* as appropriate for your OS.\r\n* In the build step, echo the contents of the `LICENSE.txt` file.\r\n    * Add script contents: `cat LICENSE.txt`\r\n\r\n## Poll SCM\r\n* Create a new Freestyle job named `pollscm`\r\n* Turn on the *Source Code Management* radio button labeled *Git*\r\n* Add Repository URL `https://github.com/matthewmccullough/hellogitworld/trunk`\r\n* Turn on the *Build Trigger* labeled *Poll SCM*.\r\n* Set the frequency to `* * * * *`\r\n    * This indicates *every one minute of every day*\r\n* Matthew will commit a change to cause the students SCM polling to find an update\r\n* Click the *Git Polling Log* link to view the history of polling\r\n\r\n## SVN Checkout, Ant Build\r\n* Create a new Freestyle job named `svnantbuild`\r\n* Turn on the *Source Code Management* radio button labeled *Subversion*\r\n* Add Repository URL `https://github.com/apache/commons-io/tags/commons-io-2.1/`\r\n* Yes, this is a Subversion checkout from GitHub\r\n\r\n## Git Source Code Jenkins Setup\r\n* Path to a local repo\r\n* Remember .git at end of local file path\r\n* Set up a new Job\r\n* `file://<YOURPATH>`\r\n\r\n## Git Checkout, Ant Build\r\n* Set up an Ant build with automatic install\r\n* `https://github.com/apache/commons-io`\r\n* Check out branch `commons-io-2.1`\r\n* Ant manual install\r\n    * <http://ant.apache.org/bindownload.cgi>\r\n    * Add to PATH environment variable\r\n    * Test from command line with `ant`\r\n\r\n## Set up a Maven Multi-Module Build\r\n* Git hosted source\r\n* `https://github.com/wakaleo/game-of-life`\r\n\r\n## Advanced Git Configuration\r\n* Git\r\n    * Which branches to build\r\n    * Merging branches as a pre-build and post-build step\r\n    * Publishing result branches on success\r\n* Parameters\r\n    * Can pass through SHA1\r\n\r\n## Compile Time Plugins\r\n* Compiler warnings\r\n* Violations plugin\r\n\r\n## Email Notification\r\n* Basic and Advanced\r\n* SMTP: smtp.gmail.com\r\n* User: workshopsender@gmail.com\r\n* Password: workshop12\r\n\r\n## Remote Trigger URLs\r\n* Secret URL to invoke a build\r\n* http://localhost:8080/job/GradleTest/build?token=1111\r\n* Can be CURLed\r\n\r\n## Archive\r\n* Choose which artifacts of the build are saved permanently\r\n* Glob pattern\r\n\r\n## Fingerprints\r\n* Choose which items to fingerprint\r\n* Look up a fingerprint\r\n\r\n## Collectors\r\n* Junit\r\n* TestNG\r\n* Compiler warnings\r\n* Parsing TXT, XML files\r\n\r\n## Monitoring\r\n* JUnit report collector\r\n* Code coverage graph\r\n\r\n## Post-build Steps\r\n* Promote\r\n* Announce\r\n* Blame developer with commits\r\n* Send mail on success or failure\r\n\r\n## Project Dependencies\r\n* Dependency graphs of projects\r\n* GraphViz CLI tool `dot`\r\n\r\n## Radiators\r\n* Dashboard\r\n* Adding more columns to primary view\r\n** Cron schedule\r\n** Type\r\n* Filtering primary view (tabs)\r\n\r\n## Slaves\r\n* Types\r\n    * Interactive JNLP\r\n    * Headless JNLP\r\n    * SSH\r\n    * EC2\r\n* Usage graph (do you need more nodes)\r\n\r\n## Build Promotions\r\n* Automatic promotion?\r\n* Manual promotion (mark as success)\r\n\r\n## Pipelines\r\n* Plugin for showing connection from one job to another\r\n\r\n## Command Line\r\n* Download the JAR\r\n* Get help `java -jar jenkins-cli.jar -s http://localhost:8080/ help`\r\n","tagline":"A guided tutorial","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}